{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","voiceCommand","setCommand","1","2","3","4","5","6","7","8","ptData","setPtData","activeLine","setActiveLine","cnt","refresh","doInput","event","v","target","innerText","rpl","val","replace","match","all","bed","temp","className","Object","keys","map","key","style","fontWeight","color","contentEditable","tabIndex","onInput","x","margin","onClick","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOA2FeA,G,MAxFO,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACjBC,EADiB,KACHC,EADG,OAEIF,mBAAS,CAACG,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,KAFlE,mBAEjBC,EAFiB,KAETC,EAFS,OAGYZ,mBAAS,IAHrB,mBAGjBa,EAHiB,KAGLC,EAHK,OAIDd,mBAAS,GAJR,mBAIjBe,EAJiB,KAIZC,EAJY,KAOxB,SAASC,EAAQC,GACb,IAAIC,EAAID,EAAME,OAAOC,UACrB,GAAKF,EAAL,CACAD,EAAME,OAAOC,UAAY,GAEzBnB,EAAWD,EAAekB,GAc1B,IAbA,IAaA,MAbY,CACR,CAAC,UAAM,GACP,CAAC,UAAM,GACP,CAAC,UAAM,GACP,CAAC,UAAM,GACP,CAAC,UAAM,GACP,CAAC,UAAM,GACP,CAAC,UAAM,GACP,CAAC,UAAM,GACP,CAAC,UAAM,GACP,CAAC,UAAM,IAGX,eAA4B,CAAC,IAAD,0BAAlBG,EAAkB,KAAbC,EAAa,KACxBJ,EAAIA,EAAEK,QAAQF,EAAK,GAAKC,GApBH,MAuBFJ,EAAEM,MAAM,2BAA6B,GAvBnC,mBAuBpBC,EAvBoB,KAuBfC,EAvBe,KAuBVC,EAvBU,KAwBpBF,IAELf,EAAOgB,GAAOC,EACdd,EAAca,GACdf,EAAUD,GACVT,EAAW,IACXc,EAAQD,EAAM,KAOlB,OACI,yBAAKc,UAAU,OACX,yBAAKA,UAAU,OACX,oEACA,yBAAKA,UAAU,OACX,+BACI,+BACA,4BACI,kDACA,sCAGJ,+BAECC,OAAOC,KAAKpB,GACRqB,KAAI,SAACL,GACF,IAAIC,EAAOjB,EAAOgB,GAClB,OAAO,wBAAIM,IAAG,cAASN,EAAT,YAAgBC,GAAQC,WAAYhB,KAAgBc,EAAM,SAAW,IAC/E,wBAAIO,MAAO,CAACC,WAAY,SAAUR,GAClC,wBAAIO,MAAO,CAACE,OAAQR,EAAO,OAASA,EAAO,GAAK,MAAQ,UAAWA,UAMvF,yBAAKS,iBAAiB,EACjBR,UAAU,eACVS,SAAU,EACVC,QAAStB,KAElB,6BACKhB,EACA,CAAC,iBAAQ,mBACL+B,KAAI,SAACQ,GACF,OAAO,4BAAQP,IAAG,UAAKO,GAAKN,MAAO,CAACO,OAAQ,OAAQC,QAAS,WArC7EzB,EAAQ,CAACG,OAAQ,CAACC,UAqC0EmB,OACvEA,UCtETG,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACrB,2DCZRsB,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDmIxC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.baecb80a.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nconst App: React.FC = () => {\n    const [voiceCommand, setCommand] = useState(\"\");\n    const [ptData, setPtData] = useState({1: \"\", 2: \"\", 3: \"\", 4: \"\", 5: \"\", 6: \"\", 7: \"\", 8: \"\"} as any);\n    const [activeLine, setActiveLine] = useState(\"\");\n    const [cnt, refresh] = useState(0);\n\n\n    function doInput(event: any) {\n        let v = event.target.innerText;\n        if (!v) return;\n        event.target.innerText = \"\";\n\n        setCommand(voiceCommand + v);\n        const map = [\n            [/一/g, 1],\n            [/二/g, 2],\n            [/三/g, 3],\n            [/四/g, 4],\n            [/五/g, 5],\n            [/六/g, 6],\n            [/七/g, 7],\n            [/八/g, 8],\n            [/九/g, 9],\n            [/十/g, 0]\n        ];\n\n        for (let [rpl, val] of map) {\n            v = v.replace(rpl, '' + val);\n        }\n\n        let [all, bed, temp] = v.match(/([\\d\\w]+)[^\\d]([\\d.]+)/) || [];\n        if (!all) return;\n\n        ptData[bed] = temp;\n        setActiveLine(bed);\n        setPtData(ptData);\n        setCommand(\"\");\n        refresh(cnt + 1);\n    }\n\n    function simulate(cmd: string) {\n        doInput({target: {innerText: cmd}})\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"cn1\">\n                <h4>患者体温录入</h4>\n                <div className=\"tab\">\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>床位号</th>\n                            <th>Temp</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n\n                        {Object.keys(ptData)\n                            .map((bed: any) => {\n                                let temp = ptData[bed];\n                                return <tr key={`bed-${bed}:${temp}`} className={+activeLine === +bed ? \"active\" : \"\"}>\n                                    <td style={{fontWeight: \"bold\"}}>{bed}</td>\n                                    <td style={{color: +temp > 38.5 || +temp < 36 ? \"red\" : \"black\"}}>{temp}</td>\n                                </tr>;\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n                <div contentEditable={true}\n                     className=\"overlay full\"\n                     tabIndex={1}\n                     onInput={doInput}/>\n            </div>\n            <div>\n                {voiceCommand}\n                {[\"3床5好\", \"3床70都\"]\n                    .map((x) => {\n                        return <button key={`${x}`} style={{margin: \"3px\"}} onClick={() => simulate(x)}>\n                            {x}\n                        </button>;\n                    })}\n            </div>\n\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}